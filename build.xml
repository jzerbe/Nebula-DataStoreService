
<project name="NebulaDSS" default="dist" basedir=".">
    <description>
        ant buildfile for the Nebula Data Storage Service
    </description>
    <property name="src.mainclass" value="nebuladss.NebulaDSS" />
    
    <!-- directories and files -->
    <property name="contrib.dir" location="contrib" />
    <property name="src.dir" location="src" />
    <property name="test.dir" location="test" />
    <property name="src.build.dir" location="build-src" />
    <property name="test.build.dir" location="build-test" />
    <property name="docs.dir" location="docs" />
    <property name="dist.file" location="nebuladss.jar" />

    <!-- new forked jvm settings -->
    <property name="init.mem.size" value="128m" />
    <property name="max.mem.size" value="256m" />
    
    <!-- javac properties -->
    <property name="javac.debug" value="true" />
    <property name="javac.fork" value="true" />
    <property name="javac.optimize" value="true" />
    <property name="jdk-version.source" value="1.5" />
    <property name="jdk-version.target" value="1.5" />


    <target name="init">
        <!-- add the contrib jars to the "jars.classpath" classpath -->
        <path id="jars.classpath">
            <fileset dir="${contrib.dir}" includes="**/*.jar" />
        </path>
        
        <!-- junit classpath: include junit and built classes -->
        <path id="junit.classpath">
            <pathelement location="contrib/junit-4.10.jar" />
            <pathelement location="${test.build.dir}" />
        </path>
        
        <!-- created the needed class output directory -->
        <mkdir dir="${src.build.dir}" />
    </target>

    <target name="compile-source" depends="init" description="compile the source classes">
        <javac fork="${javac.fork}" srcdir="${src.dir}" destdir="${src.build.dir}" debug="${javac.debug}"
        memoryinitialsize="${init.mem.size}" memorymaximumsize="${max.mem.size}"
        target="${jdk-version.target}" source="${jdk-version.source}"
        optimize="${javac.optimize}" classpathref="jars.classpath">
            <compilerarg value="-Xlint" />
        </javac>
    </target>
    
    <target name="compile-tests" depends="compile-source" description="compile the test classes">
        <!-- keep the tests fresh -->
        <delete dir="${test.build.dir}" />
        <mkdir dir="${test.build.dir}" />
        
        <!-- need the compiled original classes for our tests to compile/run -->
        <copy todir="${test.build.dir}">
            <fileset dir="${src.build.dir}" />
        </copy>
        
        <!-- create the tests anew -->
        <javac fork="${javac.fork}" srcdir="${test.dir}" destdir="${test.build.dir}" debug="${javac.debug}"
        memoryinitialsize="${init.mem.size}" memorymaximumsize="${max.mem.size}"
        target="${jdk-version.target}" source="${jdk-version.source}"
        optimize="${javac.optimize}" classpathref="junit.classpath">
            <compilerarg value="-Xlint" />
        </javac>
    </target>

    <target name="junit" depends="compile-tests">
        <junit fork="true" printsummary="true" showoutput="true" maxmemory="${max.mem.size}">
            <classpath>
                <path refid="junit.classpath" />
                <path refid="jars.classpath" />
            </classpath>
            <formatter type="plain" usefile="false" />
            <batchtest>
                <fileset dir="${test.dir}">
                    <include name="**/*Test*.java" />
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="javadoc" depends="compile-source" description="create component docs">
        <!-- keep docs fresh -->
        <delete dir="${docs.dir}" />
        <mkdir dir="${docs.dir}" />
        
        <!-- build the component docs, ${component.*} is predefined -->
        <javadoc author="true" bottom="${component.title}" destdir="${docs.dir}"
        source="${jdk-version.source}" doctitle="${component.title}"
        packagenames="*" access="protected" sourcepath="${src.dir}"
        version="true" windowtitle="${component.title} (Version ${component.version})">
        </javadoc>
    </target>

    <target name="dist" depends="compile-source" description="bundle distribution">
        <!-- copy static files into build dir for dist packaging -->
        <mkdir dir="${src.build.dir}/webapp" />
        <copy todir="${src.build.dir}/webapp">
            <fileset dir="${src.dir}/webapp" />
        </copy>

        <!-- put everything in ${src.build.dir} into the ${dist.file} file -->
        <jar jarfile="${dist.file}" basedir="${src.build.dir}">
            <!-- create application entry point -->
            <manifest>
                <attribute name="Main-Class" value="${src.mainclass}" />
            </manifest>
            <!-- add in contrib jars otherwise classpath will be lacking -->
            <zipgroupfileset dir="${contrib.dir}" includes="**/*.jar" />
        </jar>
    </target>

    <target name="run" depends="dist" description="run the dist">
        <java jar="${dist.file}" fork="true" />
    </target>

    <target name="clean" description="clean up generated directories and files">
        <delete dir="${src.build.dir}" />
        <delete dir="${test.build.dir}" />
        <delete dir="${docs.dir}" />
        <delete file="${dist.file}" />
    </target>
</project>
